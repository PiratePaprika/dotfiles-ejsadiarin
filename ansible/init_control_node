#!/usr/bin/env bash

# Initialization Script for dotfiles
# Author: Ej Sadiarin github.com/ejsadiarin
#
# NOTE: THIS IS ONLY TO BE RUN ON THE CONTROL NODE (if configuring on multiple servers/machines/computers)

if [ ! -f "./ansible.cfg" ]; then
    echo "Please run this script from the root of the ansible directory."
    exit 1
fi

set -euo pipefail
IFS=

##########################
#   Color Codes (ANSI)   #
##########################
# normal
NORMAL='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'

# bold version
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
LSEA="\\033[1m\\033[38;5;49m"
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

####################
#   Emoji Codes    #
####################
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"  # âœ”
X_MARK="${RED}\xE2\x9C\x96${NC}"        # âœ–
PIN="${RED}\xF0\x9F\x93\x8C${NC}"       # ðŸ“Œ
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"       # âŒ›
ARROW="${SEA}\xE2\x96\xB6${NC}"         # â–¶
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"      # ðŸ“‹
HOT="${YELLOW}\xF0\x9F\x94\xA5${NC}"    # ðŸ”¥
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"   # ðŸš¨
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}" # âˆŸ

#################
#   VARIABLES   #
#################
DOTFILES="$HOME/dotfiles"
RELEASE_FILE="$DOTFILES/.exquisite_release"
EXQUILOG="$DOTFILES/.exquisite_log"
VAULT_PASSWORD_FILE="$DOTFILES/ansible/master_password"
date_today=$(date +"%Y-%m-%d %H:%M:%S")

# install ansible (add distro-specific conditions)
# run ansible-playbook main.yml --ask-become-pass
# switch case for dry-run, run local, run on remote (pass hosts.ini from inventory)

# writes to log file for exquisite dotfiles
# Parameters: LOG_LEVEL, TASK, MSG
write_to_exquilog() {
    local log_level="$1"
    local task="$2"
    local status_message="$3"
    local datetime=""
    local final_log=""

    if [[ ! -f "$EXQUILOG" ]]; then
        touch "$EXQUILOG"
    fi

    datetime=$(date +"%Y-%m-%d %H:%M:%S.%3N")
    final_log="[${datetime} - ${log_level^^}] ${task,,}: ${status_message}"

    echo "$final_log" >>"$EXQUILOG"
}

stdout_msg() {
    local status="$1" task="$2" msg="$3"
    case "${status^^}" in
    ERROR)
        prefix="${X_MARK} ${RED}ERROR${NORMAL}"
        ;;
    WARNING)
        prefix="${WARNING} WARNING"
        ;;
    INFO)
        prefix="${PIN} INFO"
        ;;
    INSTALLING)
        prefix="${CLOCK} INSTALLING"
        ;;
    INSTALLED)
        prefix="${CHECK_MARK} INSTALLED"
        ;;
    *)
        prefix="$status"
        ;;
    esac
    printf '%s [%s] %s: %s\n' "${BLUE}" "${prefix}" "${task}" "${msg}"
    echo -e "${NORMAL}"
}

# Install system-based dependencies

arch_setup() {
    stdout_msg "START" "arch-setup" "Running arch setup"
    write_to_exquilog "INFO" "arch-setup" "Initiate arch setup"

    if [[ ! -f $RELEASE_FILE ]]; then
        stdout_msg "DETECTED" "first run" "Detected dotfiles setup first run..."
        write_to_exquilog "INFO" "FIRST RUN" "Detected dotfiles setup first run..."

        # --- Install operations for first run ----

        # install paru
        if command -v paru >/dev/null 2>&1; then
            stdout_msg "INFO" "paru" "Paru is already installed."
            write_to_exquilog "INFO" "paru" "Paru is already installed."
        else
            stdout_msg "INSTALLING" "paru" "Installing paru..."
            write_to_exquilog "INFO" "paru" "Installing paru..."
            {
                cd "$HOME" || exit
                git clone https://aur.archlinux.org/paru-bin.git
                cd paru-bin || exit
                makepkg -si --noconfirm
                stdout_msg "INSTALLED" "paru" "Paru is now installed!"
                write_to_exquilog "INFO" "paru" "Paru is now installed!"
            } || {
                stdout_msg "ERROR" "paru" "Failed to install paru. Skipping..."
                write_to_exquilog "ERROR" "paru" "Failed to install paru. Need to install manually."
            }
        fi

        # install ansible
        if command -v ansible >/dev/null 2>&1; then
            stdout_msg "INFO" "ansible" "Ansible is already installed."
            write_to_exquilog "INFO" "ansible" "Ansible is already installed."
        else
            stdout_msg "INSTALLING" "ansible" "Installing ansible..."
            write_to_exquilog "INFO" "ansible" "Installing ansible..."
            {
                sudo pacman -S ansible
                stdout_msg "INSTALLED" "ansible" "Ansible is now installed!"
                write_to_exquilog "INFO" "ansible" "Ansible is now installed!"
            } || {
                stdout_msg "ERROR" "ansible" "Failed to install ansible. Skipping..."
                write_to_exquilog "ERROR" "ansible" "Failed to install ansible. Need to install manually."
            }
        fi

        # install python, pip deps
        if pacman -Q python >/dev/null 2>&1; then
            local version=""
            version=$(python3 --version) || {
                version=$(python --version) || version=$(python2 --version) # fallback
            }
            stdout_msg "INFO" "python" "Python (ver: ${version}) is already installed."
            write_to_exquilog "INFO" "python" "Python (ver: ${version}) is already installed."
        else
            stdout_msg "INSTALLING" "python" "Installing python..."
            write_to_exquilog "INFO" "python" "Installing python..."
            {
                sudo pacman -S python
                stdout_msg "INSTALLED" "python" "Python is now installed!"
                write_to_exquilog "INFO" "python" "Python is now installed!"
            } || {
                stdout_msg "ERROR" "python" "Failed to install python. Skipping..."
                write_to_exquilog "ERROR" "python" "Failed to install python."
            }
            stdout_msg "INSTALLING" "python" "Installing python-pip..."
            write_to_exquilog "INFO" "python-pip" "Installing python-pip..."
            {
                sudo pacman -S python-pip
                stdout_msg "INSTALLED" "python-pip" "Python-pip is now installed!"
                write_to_exquilog "INFO" "python-pip" "Python-pip is now installed!"
            } || {
                stdout_msg "ERROR" "python-pip" "Failed to install python-pip. Skipping..."
                write_to_exquilog "ERROR" "python-pip" "Failed to install python-pip."
            }
        fi

        # install openssh (most likely installed already but why not ensure it)
        if pacman -Q openssh >/dev/null 2>&1; then
            stdout_msg "INFO" "openssh" "OpenSSH is already installed."
            write_to_exquilog "INFO" "openssh" "OpenSSH is already installed."
        else
            stdout_msg "INSTALLING" "openssh" "Installing openssh..."
            write_to_exquilog "INFO" "openssh" "Installing openssh..."
            {
                sudo pacman -S openssh
                stdout_msg "INSTALLED" "openssh" "OpenSSH is now installed!"
                write_to_exquilog "INFO" "openssh" "OpenSSH is now installed!"
            } || {
                stdout_msg "ERROR" "openssh" "Failed to install openssh. Skipping..."
                write_to_exquilog "ERROR" "openssh" "Failed to install openssh."
            }
        fi

        # install necessary ansible-galaxy collections
        stdout_msg "INSTALLING" "ansible-galaxy" "Installing necessary collections..."
        write_to_exquilog "INFO" "ansible-galaxy" "Installing necessary collections"
        {
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/requirements.yml >/dev/null 2>&1
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/arch.yml >/dev/null 2>&1
            stdout_msg "INSTALLED" "ansible-galaxy" "Collections successfully installed!"
            write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully installed!"
        } || {
            stdout_msg "ERROR" "ansible-galaxy" "Failed to install collections. Install manually."
            write_to_exquilog "ERROR" "ansible-galaxy" "Failed to install openssh."
        }

        # do not automate enabling sshd to avoid unwanted opened services since it is optional
        stdout_msg "WARNING" "openssh-server" "Manually start/enable sshd via systemctl to make host a ssh server (Optional)."

        stdout_msg "INFO" "arch-setup" "Setup done! [$date_today]"
        write_to_exquilog "INFO" "ansible-galaxy" "Setup done!"
    else
        # --- Update operations for subsequent runs ----

        # update ansible-galaxy collections
        stdout_msg "UPDATING" "ansible-galaxy" "Updating necessary collections"
        write_to_exquilog "INFO" "ansible-galaxy" "Updating necessary collections"
        {
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/requirements.yml >/dev/null 2>&1
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/arch.yml >/dev/null 2>&1
            stdout_msg "UPDATED" "ansible-galaxy" "Collections successfully updated!"
            write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully updated!"
        } || {
            stdout_msg "ERROR" "ansible-galaxy" "Failed to update collections. Update manually."
            write_to_exquilog "ERROR" "ansible-galaxy" "Failed to update openssh."
        }
        stdout_msg "INFO" "arch-setup" "Update done! [$date_today]"
        write_to_exquilog "INFO" "ansible-galaxy" "Update done!"
    fi
}

debian_setup() {

    # install ansible
    if command -v ansible >/dev/null 2>&1; then
        stdout_msg "INFO" "ansible" "Ansible is already installed."
        write_to_exquilog "INFO" "ansible" "Ansible is already installed."
    else
        stdout_msg "INSTALLING" "ansible" "Installing ansible..."
        write_to_exquilog "INFO" "ansible" "Installing ansible..."
        {
            sudo apt install ansible-core
            stdout_msg "INSTALLED" "ansible" "Ansible is now installed!"
            write_to_exquilog "INFO" "ansible" "Ansible is now installed!"
        } || {
            stdout_msg "ERROR" "ansible" "Failed to install ansible. Skipping..."
            write_to_exquilog "ERROR" "ansible" "Failed to install ansible. Need to install manually."
        }
    fi

    # install python, pip deps
    if dpkg --get-selections | grep python >/dev/null 2>&1; then
        local version=""
        version=$(python3 --version) || {
            version=$(python --version) || version=$(python2 --version) # fallback
        }
        stdout_msg "INFO" "python" "Python (ver: ${version}) is already installed."
        write_to_exquilog "INFO" "python" "Python (ver: ${version}) is already installed."
    else
        stdout_msg "INSTALLING" "python" "Installing python..."
        write_to_exquilog "INFO" "python" "Installing python..."
        {
            sudo apt install python
            stdout_msg "INSTALLED" "python" "Python is now installed!"
            write_to_exquilog "INFO" "python" "Python is now installed!"
        } || {
            stdout_msg "ERROR" "python" "Failed to install python. Skipping..."
            write_to_exquilog "ERROR" "python" "Failed to install python."
        }
        stdout_msg "INSTALLING" "python" "Installing python-pip..."
        write_to_exquilog "INFO" "python-pip" "Installing python-pip..."
        {
            sudo apt install python-pip
            stdout_msg "INSTALLED" "python-pip" "Python-pip is now installed!"
            write_to_exquilog "INFO" "python-pip" "Python-pip is now installed!"
        } || {
            stdout_msg "ERROR" "python-pip" "Failed to install python-pip. Skipping..."
            write_to_exquilog "ERROR" "python-pip" "Failed to install python-pip."
        }
    fi

    # install openssh (most likely installed already but why not ensure it)
    local openssh_deps=("openssh-client" "openssh-server")
    for package in "${openssh_deps[@]}"; do
        if dpkg --get-selections | grep "$package" >/dev/null 2>&1; then
            stdout_msg "INSTALLED" "$package" "$package is already installed"
            write_to_exquilog "INFO" "$package" "$package is already installed"
        else
            stdout_msg "INSTALLING" "$package" "Installing $package..."
            write_to_exquilog "INSTALLING" "$package" "Installing $package..."
            {
                sudo apt install "$package"
                stdout_msg "INSTALLED" "$package" "$package is now installed!"
                write_to_exquilog "INFO" "$package" "$package is now installed!"
            } || {
                stdout_msg "ERROR" "$package" "Failed to install $package. Skipping..."
                write_to_exquilog "ERROR" "$package" "Failed to install $package. Need to install manually."
            }
        fi
    done

    # do not automate enabling sshd to avoid unwanted opened services since it is optional
    stdout_msg "WARNING" "openssh-server" "Manually start/enable sshd via systemctl to make host a ssh server (Optional)."

    # install necessary ansible-galaxy collections
    if [[ ! -f $RELEASE_FILE ]]; then
        stdout_msg "DETECTED" "first run" "Detected dotfiles setup first run..."
        write_to_exquilog "INFO" "FIRST RUN" "Detected dotfiles setup first run..."

        stdout_msg "INSTALLING" "ansible-galaxy" "Installing necessary collections..."
        write_to_exquilog "INFO" "ansible-galaxy" "Installing necessary collections"
        {
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/requirements.yml >/dev/null 2>&1
            stdout_msg "INSTALLED" "ansible-galaxy" "Collections successfully installed!"
            write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully installed!"
        } || {
            stdout_msg "ERROR" "ansible-galaxy" "Failed to install collections. Install manually."
            write_to_exquilog "ERROR" "ansible-galaxy" "Failed to install collections."
        }
    else
        stdout_msg "UPDATING" "ansible-galaxy" "Updating necessary collections"
        write_to_exquilog "INFO" "ansible-galaxy" "Updating necessary collections"
        {
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/requirements.yml >/dev/null 2>&1
            stdout_msg "UPDATED" "ansible-galaxy" "Collections successfully updated!"
            write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully updated!"
        } || {
            stdout_msg "ERROR" "ansible-galaxy" "Failed to update collections. Update manually."
            write_to_exquilog "ERROR" "ansible-galaxy" "Failed to update collections."
        }
    fi

    stdout_msg "INFO" "debian-setup" "Setup done! [$date_today]"
    write_to_exquilog "INFO" "ansible-galaxy" "Setup done!"
}

fedora_setup() {
    stdout_msg "START" "fedora-setup" "Running Fedora setup"
    write_to_exquilog "INFO" "fedora-setup" "Initiate Fedora setup"

    if [[ ! -f $RELEASE_FILE ]]; then
        stdout_msg "DETECTED" "first run" "Detected dotfiles setup first run..."
        write_to_exquilog "INFO" "FIRST RUN" "Detected dotfiles setup first run..."

        # --- Install operations for first run ----

        # install ansible
        if command -v ansible >/dev/null 2>&1; then
            stdout_msg "INFO" "ansible" "Ansible is already installed."
            write_to_exquilog "INFO" "ansible" "Ansible is already installed."
        else
            stdout_msg "INSTALLING" "ansible" "Installing ansible..."
            write_to_exquilog "INFO" "ansible" "Installing ansible..."
            {
                sudo dnf install -y ansible
                stdout_msg "INSTALLED" "ansible" "Ansible is now installed!"
                write_to_exquilog "INFO" "ansible" "Ansible is now installed!"
            } || {
                stdout_msg "ERROR" "ansible" "Failed to install ansible. Skipping..."
                write_to_exquilog "ERROR" "ansible" "Failed to install ansible. Need to install manually."
            }
        fi

        # install python, pip deps
        if rpm -q python3 >/dev/null 2>&1; then
            local version=""
            version=$(python3 --version) || {
                version=$(python --version) || version=$(python2 --version) # fallback
            }
            stdout_msg "INFO" "python" "Python (ver: ${version}) is already installed."
            write_to_exquilog "INFO" "python" "Python (ver: ${version}) is already installed."
        else
            stdout_msg "INSTALLING" "python" "Installing python..."
            write_to_exquilog "INFO" "python" "Installing python..."
            {
                sudo dnf install -y python3
                stdout_msg "INSTALLED" "python" "Python is now installed!"
                write_to_exquilog "INFO" "python" "Python is now installed!"
            } || {
                stdout_msg "ERROR" "python" "Failed to install python. Skipping..."
                write_to_exquilog "ERROR" "python" "Failed to install python."
            }
            stdout_msg "INSTALLING" "python" "Installing python-pip..."
            write_to_exquilog "INFO" "python-pip" "Installing python-pip..."
            {
                sudo dnf install -y python3-pip
                stdout_msg "INSTALLED" "python-pip" "Python-pip is now installed!"
                write_to_exquilog "INFO" "python-pip" "Python-pip is now installed!"
            } || {
                stdout_msg "ERROR" "python-pip" "Failed to install python-pip. Skipping..."
                write_to_exquilog "ERROR" "python-pip" "Failed to install python-pip."
            }
        fi

        # install openssh (most likely installed already but why not ensure it)
        if rpm -q openssh-server >/dev/null 2>&1; then
            stdout_msg "INFO" "openssh" "OpenSSH server is already installed."
            write_to_exquilog "INFO" "openssh" "OpenSSH server is already installed."
        else
            stdout_msg "INSTALLING" "openssh" "Installing openssh-server..."
            write_to_exquilog "INFO" "openssh" "Installing openssh-server..."
            {
                sudo dnf install -y openssh-server
                stdout_msg "INSTALLED" "openssh" "OpenSSH server is now installed!"
                write_to_exquilog "INFO" "openssh" "OpenSSH server is now installed!"
            } || {
                stdout_msg "ERROR" "openssh" "Failed to install openssh-server. Skipping..."
                write_to_exquilog "ERROR" "openssh" "Failed to install openssh-server."
            }
        fi

        # install necessary ansible-galaxy collections
        stdout_msg "INSTALLING" "ansible-galaxy" "Installing necessary collections..."
        write_to_exquilog "INFO" "ansible-galaxy" "Installing necessary collections"
        {
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/requirements.yml >/dev/null 2>&1
            stdout_msg "INSTALLED" "ansible-galaxy" "Collections successfully installed!"
            write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully installed!"
        } || {
            stdout_msg "ERROR" "ansible-galaxy" "Failed to install collections. Install manually."
            write_to_exquilog "ERROR" "ansible-galaxy" "Failed to install collections."
        }

        # do not automate enabling sshd to avoid unwanted opened services since it is optional
        stdout_msg "WARNING" "openssh-server" "Manually start/enable sshd via systemctl to make host a ssh server (Optional)."

        stdout_msg "INFO" "fedora-setup" "Setup done! [$date_today]"
        write_to_exquilog "INFO" "fedora-setup" "Setup done!"
    else
        # --- Update operations for subsequent runs ----

        # update ansible-galaxy collections
        stdout_msg "UPDATING" "ansible-galaxy" "Updating necessary collections"
        write_to_exquilog "INFO" "ansible-galaxy" "Updating necessary collections"
        {
            ansible-galaxy collection install -r "$DOTFILES"/ansible/collection/requirements.yml >/dev/null 2>&1
            stdout_msg "UPDATED" "ansible-galaxy" "Collections successfully updated!"
            write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully updated!"
        } || {
            stdout_msg "ERROR" "ansible-galaxy" "Failed to update collections. Update manually."
            write_to_exquilog "ERROR" "ansible-galaxy" "Failed to update collections."
        }
        stdout_msg "INFO" "fedora-setup" "Update done! [$date_today]"
        write_to_exquilog "INFO" "fedora-setup" "Update done!"
    fi
}

main() {
    # load OS info
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
    else
        echo "Unsupported OS: /etc/os-release not found." >&2
        exit 1
    fi

    is_first_run=false
    if [[ ! -f "$RELEASE_FILE" ]]; then
        is_first_run=true
    fi

    # Dispatch based on ID and ID_LIKE
    case "$ID" in
    arch* | manjaro)
        arch_setup
        ;;
    debian | ubuntu | raspbian)
        debian_setup
        ;;
    fedora | rhel)
        fedora_setup
        ;;
    *)
        # Fallback to ID_LIKE
        if [[ "$ID_LIKE" =~ arch ]]; then
            arch_setup
        elif [[ "$ID_LIKE" =~ debian ]]; then
            debian_setup
        elif [[ "$ID_LIKE" =~ fedora|rhel ]]; then
            fedora_setup
        else
            echo "Unsupported OS: $ID (ID_LIKE=$ID_LIKE)" >&2
            exit 1
        fi
        ;;
    esac

    if $is_first_run; then
        touch "$RELEASE_FILE"
        stdout_msg "INFO" "main" "First-run setup complete"
        write_to_exquilog INFO main "Marked first run complete"
    else
        stdout_msg "INFO" "main" "Update-run setup complete"
        write_to_exquilog INFO main "Marked update run complete"
    fi
}

main "$@"
