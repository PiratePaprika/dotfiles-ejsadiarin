---
# Main Playbook
# run on local: ansible-playbook main.yml --ask-become-pass
# run on remotes: ansible-playbook main.yml --ask-pass --ask-become-pass -i inventory/hosts.ini
# for dry-run (check mode): ansible-playbook --check main.yml --ask-become-pass
# NOTE: playbooks dir are just optional/separate things and are NOT RUN/INCLUDED when running this main playbook

- name: Exquisite Dotfiles Configuration
  hosts: localhost # if have multiple hosts on hosts.ini file then: 'all', 'linux', 'webservers', etc.
  connection: local
  gather_facts: true

  pre_tasks:
    - name: Detect OS and put in machine_os variable
      ansible.builtin.set_fact:
        machine_os: "{{ ansible_facts['os_family'] | lower }}" # can be 'archlinux', 'debian', 'redhat', etc.

    - name: OS detection for Arch-based systems
      ansible.builtin.set_fact:
        machine_os: "archlinux"
      when: "ansible_facts['os_family'] | lower == 'archlinux' or ansible_facts['distribution'] | lower == 'arch' or ansible_facts['distribution'] | lower == 'manjaro'"

    - name: OS detection for Debian-based systems
      ansible.builtin.set_fact:
        machine_os: "debian"
      when: "ansible_facts['os_family'] | lower == 'debian' or ansible_facts['distribution'] | lower == 'ubuntu' or ansible_facts['distribution'] | lower == 'pop!_os'"

    - name: OS detection for Redhat-based systems
      ansible.builtin.set_fact:
        machine_os: "redhat"
      when: "ansible_facts['os_family'] | lower == 'redhat' or ansible_facts['distribution'] | lower == 'fedora' or ansible_facts['distribution'] | lower == 'centos' or ansible_facts['distribution'] | lower == 'rocky'"

    - name: Debug machine_os
      ansible.builtin.debug:
        msg: "The machine is running {{ machine_os }} ({{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }})"

    - name: Validate supported OS
      ansible.builtin.fail:
        msg: "Unsupported OS: {{ ansible_facts['distribution'] }}. This playbook supports: Arch, Debian, and RedHat-based systems."
      when: machine_os not in ['archlinux', 'debian', 'redhat']

    - name: Register Host User
      ansible.builtin.set_fact:
        host_user: "{{ ansible_user_id }}"
      when: host_user is not defined

    - name: Run system_update role
      ansible.builtin.include_role:
        name: system_update

    - name: Configure NTP timesync
      ansible.builtin.include_role:
        name: timezone_ntp

    - name: Configure Locale to UTF-8
      ansible.builtin.shell: "localectl set-locale LANG=en_US.UTF-8"

  roles:
    - zsh
    - essentials
    - git
    - ssh
    - gpg
    - tmux
    - neovim
    - cron
    - kitty
    - go_role
    # - docker
    # - jetbrains_mono_nerd_font
    # - js_ts_role
    # - python_role
    # - java_role
    # - csharp_dotnet_role
    # - mpv

  tasks:
    - name: Link .ideavimrc
      ansible.builtin.file:
        src: "{{ ansible_user_dir }}/dotfiles/.ideavimrc"
        dest: "{{ ansible_user_dir }}/.ideavimrc"
        state: link

    - name: Link .vimrc
      ansible.builtin.file:
        src: "{{ ansible_user_dir }}/dotfiles/.vimrc"
        dest: "{{ ansible_user_dir }}/.vimrc"
        state: link

    # NOTE: Below are tasks/roles made optional, see group_vars/all.yml
    - name: Optional | Install Java
      ansible.builtin.include_role:
        name: java_role
      when: wants_java # defaults to false

    - name: Optional | Install C#/Dotnet
      ansible.builtin.include_role:
        name: csharp_dotnet_role
      when: wants_csharp_dotnet # defaults to false
