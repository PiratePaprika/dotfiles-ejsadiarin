#!/usr/bin/bash

# NOTE: RUN ON CONTROL NODE (if configuring on multiple servers/machines/computers)

set -e

##########################
#   Color Codes (ANSI)   #
##########################
# normal
NORMAL='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'

# bold version
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
LSEA="\\033[1m\\033[38;5;49m"
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

####################
#   Emoji Codes    #
####################
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"  # âœ”
X_MARK="${RED}\xE2\x9C\x96${NC}"        # âœ–
PIN="${RED}\xF0\x9F\x93\x8C${NC}"       # ðŸ“Œ
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"       # âŒ›
ARROW="${SEA}\xE2\x96\xB6${NC}"         # â–¶
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"      # ðŸ“‹
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"    # ðŸ”¥
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"   # ðŸš¨
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}" # âˆŸ

#################
#   VARIABLES   #
#################

DOTFILES="$HOME/dotfiles"
CHECK_IF_FIRST_RUN="$HOME/dotfiles/.exquisite_release"
EXQUILOG="$HOME/dotfiles/.exquisite_log"
VAULT_PASSWORD_FILE="$HOME/dotfiles/decrypted_mp"
date_today=$(date +"%Y-%m-%d %H:%M:%S")

# detect host OS (prioritizes os_family than specific 'distro')
OS=$(grep "^ID_LIKE=" /etc/os-release | cut -d= -f2 | tr -d '"')
if [[ -z "$OS" ]]; then
  OS=$(grep "^ID=" /etc/os-release | cut -d= -f2 | tr -d '"')
fi

if ! [[ -f "$VAULT_PASSWORD_FILE" ]]; then
  echo "NO PASSWORD FILE DETECTED!"
  exit 1
fi

# install ansible (add distro-specific conditions)
# run ansible-playbook main.yml --ask-become-pass
# switch case for dry-run, run local, run on remote (pass hosts.ini from inventory)

# writes to log file for exquisite dotfiles
# Parameters: LOG_LEVEL, TASK, MSG
write_to_exquilog() {
  local log_level="$1"
  local task="$2"
  local status_message="$3"
  local datetime=""
  local final_log=""

  if [[ ! -f "$EXQUILOG" ]]; then
    touch "$EXQUILOG"
  fi

  datetime=$(date +"%Y-%m-%d %H:%M:%S.%3N")
  final_log="[${datetime} - ${log_level^^}] ${task,,}: ${status_message}"

  echo "$final_log" >>"$EXQUILOG"
}

stdout_msg() {
  local task_status="${1^^}"
  local task_name="${LYELLOW}${2,,}${NC}"
  local status_message="$3"

  if [[ "${task_status}" == "ERROR" ]]; then
    task_status="${X_MARK} ${LRED}ERROR${NC}"
    task_name="${RED}$2${NC}"
    status_message="${RED}$3${NC}"
  elif [[ "${task_status}" == "WARNING" ]]; then
    task_status="${WARNING} ${LYELLOW}WARNING${NC}"
    status_message="${YELLOW}$3${NC}"
  elif [[ "${task_status}" == "INFO" ]]; then
    task_status="${PIN} ${LCYAN}INFO${NC}"
    status_message="${LIGHTGRAY}$3${NC}"
  elif [[ "${task_status}" == "INSTALLING" ]]; then
    task_status="${CLOCK} ${LPURPLE}INSTALLING${NC}"
    status_message="${PURPLE}$3${NC}"
  elif [[ "${task_status}" == "INSTALLED" ]]; then
    task_status="${CHECK_MARK} ${LSEA}INSTALLED${NC}"
    status_message="${SEA}$3${NC}"
  elif [[ "${task_status}" == "UPDATING" ]]; then
    task_status="${CLOCK} ${LPURPLE}UPDATING${NC}"
    status_message="${GREEN}$3${NC}"
  elif [[ "${task_status}" == "UPDATED" ]]; then
    task_status="${CHECK_MARK} ${LGREEN}UPDATED${NC}"
    status_message="${GREEN}$3${NC}"
  else
    task_status="${HOT} ${LGREEN}${1^^}${NC}"
    status_message="${SEA}$3${NC}"
  fi

  echo -e "${PURPLE}[${NC} ${task_status} - ${task_name} ${PURPLE}]:${NC} ${status_message}"
}

# Install system-based dependencies

arch_setup() {
  stdout_msg "START" "arch-setup" "Running arch setup"
  write_to_exquilog "INFO" "arch-setup" "Initiate arch setup"
  # install paru
  if command -v paru >/dev/null 2>&1; then
    stdout_msg "INFO" "paru" "Paru is already installed."
    write_to_exquilog "INFO" "paru" "Paru is already installed."
  else
    stdout_msg "INSTALLING" "paru" "Installing paru..."
    write_to_exquilog "INFO" "paru" "Installing paru..."
    {
      cd "$HOME" || exit
      git clone https://aur.archlinux.org/paru-bin.git
      cd paru-bin || exit
      makepkg -si --noconfirm
      stdout_msg "INSTALLED" "paru" "Paru is now installed!"
      write_to_exquilog "INFO" "paru" "Paru is now installed!"
    } || {
      stdout_msg "ERROR" "paru" "Failed to install paru. Skipping..."
      write_to_exquilog "ERROR" "paru" "Failed to install paru. Need to install manually."
    }
  fi

  # install ansible
  if command -v ansible >/dev/null 2>&1; then
    stdout_msg "INFO" "ansible" "Ansible is already installed."
    write_to_exquilog "INFO" "ansible" "Ansible is already installed."
  else
    stdout_msg "INSTALLING" "ansible" "Installing ansible..."
    write_to_exquilog "INFO" "ansible" "Installing ansible..."
    {
      sudo pacman -S ansible
      stdout_msg "INSTALLED" "ansible" "Ansible is now installed!"
      write_to_exquilog "INFO" "ansible" "Ansible is now installed!"
    } || {
      stdout_msg "ERROR" "ansible" "Failed to install ansible. Skipping..."
      write_to_exquilog "ERROR" "ansible" "Failed to install ansible. Need to install manually."
    }
  fi

  # install python, pip deps
  if pacman -Q python >/dev/null 2>&1; then
    local version=""
    version=$(python3 --version) || {
      version=$(python --version) || version=$(python2 --version) # fallback
    }
    stdout_msg "INFO" "python" "Python (ver: ${version}) is already installed."
    write_to_exquilog "INFO" "python" "Python (ver: ${version}) is already installed."
  else
    stdout_msg "INSTALLING" "python" "Installing python..."
    write_to_exquilog "INFO" "python" "Installing python..."
    {
      sudo pacman -S python
      stdout_msg "INSTALLED" "python" "Python is now installed!"
      write_to_exquilog "INFO" "python" "Python is now installed!"
    } || {
      stdout_msg "ERROR" "python" "Failed to install python. Skipping..."
      write_to_exquilog "ERROR" "python" "Failed to install python."
    }
    stdout_msg "INSTALLING" "python" "Installing python-pip..."
    write_to_exquilog "INFO" "python-pip" "Installing python-pip..."
    {
      sudo pacman -S python-pip
      stdout_msg "INSTALLED" "python-pip" "Python-pip is now installed!"
      write_to_exquilog "INFO" "python-pip" "Python-pip is now installed!"
    } || {
      stdout_msg "ERROR" "python-pip" "Failed to install python-pip. Skipping..."
      write_to_exquilog "ERROR" "python-pip" "Failed to install python-pip."
    }
  fi

  # install openssh (most likely installed already but why not ensure it)
  if pacman -Q openssh >/dev/null 2>&1; then
    stdout_msg "INFO" "openssh" "OpenSSH is already installed."
    write_to_exquilog "INFO" "openssh" "OpenSSH is already installed."
  else
    stdout_msg "INSTALLING" "openssh" "Installing openssh..."
    write_to_exquilog "INFO" "openssh" "Installing openssh..."
    {
      sudo pacman -S openssh
      stdout_msg "INSTALLED" "openssh" "OpenSSH is now installed!"
      write_to_exquilog "INFO" "openssh" "OpenSSH is now installed!"
    } || {
      stdout_msg "ERROR" "openssh" "Failed to install openssh. Skipping..."
      write_to_exquilog "ERROR" "openssh" "Failed to install openssh."
    }
  fi

  # do not automate enabling sshd to avoid unwanted opened services since it is optional
  stdout_msg "WARNING" "openssh-server" "Manually start/enable sshd via systemctl to make host a ssh server (Optional)."

  # install necessary ansible-galaxy collections
  if [[ ! -f $CHECK_IF_FIRST_RUN ]]; then
    stdout_msg "DETECTED" "first run" "Detected dotfiles setup first run..."
    write_to_exquilog "INFO" "FIRST RUN" "Detected dotfiles setup first run..."

    stdout_msg "INSTALLING" "ansible-galaxy" "Installing necessary collections..."
    write_to_exquilog "INFO" "ansible-galaxy" "Installing necessary collections"

    ansible-galaxy collection install -r "$DOTFILES"/ansible/collections/requirements.yml "$DOTFILES"/ansible/collections/arch.yml

    stdout_msg "INSTALLED" "ansible-galaxy" "Collections successfully installed!"
    write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully installed!"
  else
    stdout_msg "UPDATING" "ansible-galaxy" "Updating necessary collections"
    write_to_exquilog "INFO" "ansible-galaxy" "Updating necessary collections"

    ansible-galaxy collection install -r "$DOTFILES"/ansible/collections/requirements.yml "$DOTFILES"/ansible/collections/arch.yml

    stdout_msg "UPDATED" "ansible-galaxy" "Collections successfully updated!"
    write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully updated!"
  fi

  stdout_msg "DONE" "arch-setup" "Setup done! [$date_today]"
  write_to_exquilog "INFO" "ansible-galaxy" "Setup done!"
}

debian_setup() {

  # install ansible
  if command -v ansible >/dev/null 2>&1; then
    stdout_msg "INFO" "ansible" "Ansible is already installed."
    write_to_exquilog "INFO" "ansible" "Ansible is already installed."
  else
    stdout_msg "INSTALLING" "ansible" "Installing ansible..."
    write_to_exquilog "INFO" "ansible" "Installing ansible..."
    {
      sudo apt install ansible
      stdout_msg "INSTALLED" "ansible" "Ansible is now installed!"
      write_to_exquilog "INFO" "ansible" "Ansible is now installed!"
    } || {
      stdout_msg "ERROR" "ansible" "Failed to install ansible. Skipping..."
      write_to_exquilog "ERROR" "ansible" "Failed to install ansible. Need to install manually."
    }
  fi

  # install python, pip deps
  if dpkg --get-selections | grep python >/dev/null 2>&1; then
    local version=""
    version=$(python3 --version) || {
      version=$(python --version) || version=$(python2 --version) # fallback
    }
    stdout_msg "INFO" "python" "Python (ver: ${version}) is already installed."
    write_to_exquilog "INFO" "python" "Python (ver: ${version}) is already installed."
  else
    stdout_msg "INSTALLING" "python" "Installing python..."
    write_to_exquilog "INFO" "python" "Installing python..."
    {
      sudo apt install python
      stdout_msg "INSTALLED" "python" "Python is now installed!"
      write_to_exquilog "INFO" "python" "Python is now installed!"
    } || {
      stdout_msg "ERROR" "python" "Failed to install python. Skipping..."
      write_to_exquilog "ERROR" "python" "Failed to install python."
    }
    stdout_msg "INSTALLING" "python" "Installing python-pip..."
    write_to_exquilog "INFO" "python-pip" "Installing python-pip..."
    {
      sudo apt install python-pip
      stdout_msg "INSTALLED" "python-pip" "Python-pip is now installed!"
      write_to_exquilog "INFO" "python-pip" "Python-pip is now installed!"
    } || {
      stdout_msg "ERROR" "python-pip" "Failed to install python-pip. Skipping..."
      write_to_exquilog "ERROR" "python-pip" "Failed to install python-pip."
    }
  fi

  # install openssh (most likely installed already but why not ensure it)
  local openssh_deps=("openssh-client" "openssh-server")
  for package in "${openssh_deps[@]}"; do
    if dpkg --get-selections | grep "$package" >/dev/null 2>&1; then
      stdout_msg "INSTALLED" "$package" "$package is already installed"
      write_to_exquilog "INFO" "$package" "$package is already installed"
    else
      stdout_msg "INSTALLING" "$package" "Installing $package..."
      write_to_exquilog "INSTALLING" "$package" "Installing $package..."
      {
        sudo apt install "$package"
        stdout_msg "INSTALLED" "$package" "$package is now installed!"
        write_to_exquilog "INFO" "$package" "$package is now installed!"
      } || {
        stdout_msg "ERROR" "$package" "Failed to install $package. Skipping..."
        write_to_exquilog "ERROR" "$package" "Failed to install $package. Need to install manually."
      }
    fi
  done

  # do not automate enabling sshd to avoid unwanted opened services since it is optional
  stdout_msg "WARNING" "openssh-server" "Manually start/enable sshd via systemctl to make host a ssh server (Optional)."

  # install necessary ansible-galaxy collections
  if [[ ! -f $CHECK_IF_FIRST_RUN ]]; then
    stdout_msg "DETECTED" "first run" "Detected dotfiles setup first run..."
    write_to_exquilog "INFO" "FIRST RUN" "Detected dotfiles setup first run..."

    stdout_msg "INSTALLING" "ansible-galaxy" "Installing necessary collections..."
    write_to_exquilog "INFO" "ansible-galaxy" "Installing necessary collections"

    ansible-galaxy collection install -r "$DOTFILES"/ansible/collections/requirements.yml

    stdout_msg "INSTALLED" "ansible-galaxy" "Collections successfully installed!"
    write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully installed!"
  else
    stdout_msg "UPDATING" "ansible-galaxy" "Updating necessary collections"
    write_to_exquilog "INFO" "ansible-galaxy" "Updating necessary collections"

    ansible-galaxy collection install -r "$DOTFILES"/ansible/collections/requirements.yml

    stdout_msg "UPDATED" "ansible-galaxy" "Collections successfully updated!"
    write_to_exquilog "INFO" "ansible-galaxy" "Collections successfully updated!"
  fi
  i

  stdout_msg "DONE" "debian-setup" "Setup done! [$date_today]"
  write_to_exquilog "INFO" "ansible-galaxy" "Setup done!"
}

# fedora_setup() {
#
# }

# Detect OS/Distro and execute setups
if [[ "$OS" == "arch" ]]; then # check_if_arch='cat /etc/os-release | grep -i "arch"'
  arch_setup
  if [[ ! -f "$CHECK_IF_FIRST_RUN" ]]; then
    touch "$CHECK_IF_FIRST_RUN"
  fi
elif [[ "$OS" == "debian" ]]; then
  debian_setup
  if [[ ! -f "$CHECK_IF_FIRST_RUN" ]]; then
    touch "$CHECK_IF_FIRST_RUN"
  fi
# elif [[ "$OS" == "fedora" ]]; then
#   arch_setup
#   if [[ ! -f "$CHECK_IF_FIRST_RUN" ]]; then
#     touch "$CHECK_IF_FIRST_RUN"
#   fi
else
  # echo 'Skipping: Not an Arch-based system... btw'
  echo "Unsupported OS. Exiting..."
fi
